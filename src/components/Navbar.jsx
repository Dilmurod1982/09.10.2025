import * as React from "react";
import AppBar from "@mui/material/AppBar";
import Box from "@mui/material/Box";
import Toolbar from "@mui/material/Toolbar";
import Typography from "@mui/material/Typography";
import Button from "@mui/material/Button";
import IconButton from "@mui/material/IconButton";
import MenuIcon from "@mui/icons-material/Menu";
import { signOut } from "firebase/auth";
import { auth } from "../firebase/config";
import { toast } from "react-toastify";
import { useAppStore } from "../lib/zustand";
import { motion } from "framer-motion";
import { Paper, useMediaQuery } from "@mui/material";
import Drawer from "@mui/material/Drawer";
import List from "@mui/material/List";
import ListItem from "@mui/material/ListItem";
import ListItemButton from "@mui/material/ListItemButton";
import ListItemIcon from "@mui/material/ListItemIcon";
import ListItemText from "@mui/material/ListItemText";
import Divider from "@mui/material/Divider";
import { useTheme } from "@mui/material/styles";
import {
  LocalGasStation as LocalGasStationIcon,
  People as PeopleIcon,
  CorporateFare as CorporateFareIcon,
  AccountBalance as AccountBalanceIcon,
  Close as CloseIcon,
  Build as BuildIcon,
  ExpandLess,
  ExpandMore,
  SettingsInputComponent as SettingsInputComponentIcon,
  Category as CategoryIcon,
  AcUnit as CompressorIcon,
  WaterDrop as DehumidifierIcon,
  DeviceThermostat as ChillerIcon,
  Map as MapIcon,
  LocationCity as LocationCityIcon,
  Public as PublicIcon,
  Description as DescriptionIcon,
  Schedule as ScheduleIcon,
  AllInclusive as AllInclusiveIcon,
  Badge as BadgeIcon,
  Handshake as HandshakeIcon,
  List as ListIcon,
  Assignment as AssignmentIcon,
  Summarize as SummarizeIcon,
  Person as PersonIcon,
  Payment as PaymentIcon,
  MoneyOff as MoneyOffIcon,
  AccountBalanceWallet as AccountBalanceWalletIcon,
  Logout as LogoutIcon,
  Dashboard as DashboardIcon,
} from "@mui/icons-material";
import { useNavigate } from "react-router-dom";
import Collapse from "@mui/material/Collapse";
import UserModal from "./UserModal";

export default function Navbar() {
  const MotionPaper = motion.create(Paper);
  const setUser = useAppStore((state) => state.setUser);
  const user = useAppStore((state) => state.user);
  const userData = useAppStore((state) => state.userData);
  const role = userData?.role;
  const [drawerOpen, setDrawerOpen] = React.useState(false);
  const [equipmentOpen, setEquipmentOpen] = React.useState(false);
  const [equipmentDetailsOpen, setEquipmentDetailsOpen] = React.useState(false);
  const [equipmentTypesOpen, setEquipmentTypesOpen] = React.useState(false);
  const [regionsOpen, setRegionsOpen] = React.useState(false);
  const [documentsOpen, setDocumentsOpen] = React.useState(false);
  const [docsTimedOpen, setDocsTimedOpen] = React.useState(false);
  const [docsPerpOpen, setDocsPerpOpen] = React.useState(false);
  const [partnersOpen, setPartnersOpen] = React.useState(false);
  const [dailyReportsOpen, setDailyReportsOpen] = React.useState(false);
  const [userModalOpen, setUserModalOpen] = React.useState(false);

  const navigate = useNavigate();
  const theme = useTheme();
  const isMobile = useMediaQuery(theme.breakpoints.down("md"));
  const isTablet = useMediaQuery(theme.breakpoints.down("lg"));

  // –§–æ—Ä–º–∏—Ä—É–µ–º –§–ò–û –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const getUserFullName = () => {
    if (!userData) return "";

    const { lastName, firstName, middleName } = userData;
    let fullName = "";

    if (lastName) fullName += lastName;
    if (firstName) fullName += ` ${firstName}`;
    if (middleName) fullName += ` ${middleName}`;

    return fullName.trim();
  };

  // –°–æ–∫—Ä–∞—â–∞–µ–º –§–ò–û –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
  const getShortName = () => {
    if (!userData) return "";

    const { lastName, firstName } = userData;
    if (lastName && firstName) {
      return `${lastName} ${firstName.charAt(0)}.`;
    }
    return getUserFullName();
  };

  const signOutProfile = async () => {
    await signOut(auth);
    setUser(null);
    toast.success("–î–æ —Å–≤–∏–¥–∞–Ω–∏—è!");
  };

  const toggleDrawer = (open) => (event) => {
    if (
      event?.type === "keydown" &&
      (event.key === "Tab" || event.key === "Shift")
    )
      return;
    setDrawerOpen(open);
    if (!open) {
      setEquipmentOpen(false);
      setEquipmentDetailsOpen(false);
      setEquipmentTypesOpen(false);
      setRegionsOpen(false);
      setDocumentsOpen(false);
      setDocsTimedOpen(false);
      setDocsPerpOpen(false);
      setPartnersOpen(false);
      setDailyReportsOpen(false);
    }
  };

  const handleMenuClick = (path) => {
    setDrawerOpen(false);
    navigate(path);
  };

  const handleUserButtonClick = () => {
    setUserModalOpen(true);
  };

  const handleUserModalClose = () => {
    setUserModalOpen(false);
  };

  const handleUserUpdated = () => {
    toast.success("–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω—ã");
  };

  const handleEquipmentClick = () => setEquipmentOpen(!equipmentOpen);
  const handleEquipmentDetailsClick = () =>
    setEquipmentDetailsOpen(!equipmentDetailsOpen);
  const handleEquipmentTypesClick = () =>
    setEquipmentTypesOpen(!equipmentTypesOpen);
  const handleRegionsClick = () => setRegionsOpen(!regionsOpen);
  const handleDocumentsClick = () => setDocumentsOpen(!documentsOpen);
  const handleDocsTimedClick = () => setDocsTimedOpen(!docsTimedOpen);
  const handleDocsPerpClick = () => setDocsPerpOpen(!docsPerpOpen);
  const handlePartnersClick = () => setPartnersOpen(!partnersOpen);
  const handleDailyReportsClick = () => setDailyReportsOpen(!dailyReportsOpen);

  // üîπ –ú–µ–Ω—é
  const menuItems = [
    { text: "–°—Ç–∞–Ω—Ü–∏–∏", icon: <LocalGasStationIcon />, path: "/stations" },
    { text: "–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏", icon: <BadgeIcon />, path: "/employees" },
    { text: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", icon: <PeopleIcon />, path: "/users" },
    { text: "–û–û–û", icon: <CorporateFareIcon />, path: "/ltds" },
    { text: "–ë–∞–Ω–∫", icon: <AccountBalanceIcon />, path: "/banks" },
  ];

  const partnersItems = [
    {
      text: "–°–ø–∏—Å–æ–∫ –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤",
      icon: <ListIcon />,
      path: "/partners",
    },
    {
      text: "–°–ø–∏—Å–æ–∫ –¥–æ–≥–æ–≤–æ—Ä–æ–≤",
      icon: <AssignmentIcon />,
      path: "/partnerslist",
    },
    {
      text: "–û–ø–ª–∞—Ç—ã",
      icon: <PaymentIcon />,
      path: "/payments",
    },
    {
      text: "–ó–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–∏ –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤",
      icon: <MoneyOffIcon />,
      path: "/reportondebtspartners",
    },
  ];

  // üîπ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –æ—Ç—á–µ—Ç—ã
  const dailyReportsItems = [
    {
      text: "–û–±—â–∏–π –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç",
      icon: <SummarizeIcon />,
      path: "/generaldailyreport",
    },
    {
      text: "–ö–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–µ —Å—É–º–º—ã",
      icon: <AccountBalanceWalletIcon />,
      path: "/controlpayments",
    },
  ];

  const equipmentDetailsItems = [
    {
      text: "–°–≤–µ–¥–µ–Ω–∏—è –æ –∫–æ–º–ø—Ä–µ—Å—Å–æ—Ä–∞—Ö",
      icon: <CompressorIcon />,
      path: "/compressors",
    },
    {
      text: "–°–≤–µ–¥–µ–Ω–∏—è –æ –∫–æ–ª–æ–Ω–∫–∞—Ö",
      icon: <LocalGasStationIcon />,
      path: "/dispensers",
    },
    {
      text: "–°–≤–µ–¥–µ–Ω–∏—è –æ–± –æ—Å—É—à–∫–∞—Ö",
      icon: <DehumidifierIcon />,
      path: "/osushka",
    },
    { text: "–°–≤–µ–¥–µ–Ω–∏—è –æ —á–∏–ª–ª–µ—Ä–∞—Ö", icon: <ChillerIcon />, path: "/chillers" },
  ];

  const equipmentTypesItems = [
    {
      text: "–¢–∏–ø—ã –∫–æ–º–ø—Ä–µ—Å—Å–æ—Ä–æ–≤",
      icon: <CompressorIcon />,
      path: "/typeofcompressors",
    },
    {
      text: "–¢–∏–ø—ã –∫–æ–ª–æ–Ω–æ–∫",
      icon: <LocalGasStationIcon />,
      path: "/typeofdispensers",
    },
    { text: "–¢–∏–ø—ã –æ—Å—É—à–æ–∫", icon: <DehumidifierIcon />, path: "/typeofosushka" },
    { text: "–¢–∏–ø—ã —á–∏–ª–ª–µ—Ä–æ–≤", icon: <ChillerIcon />, path: "/typeofchillers" },
  ];

  const regionsItems = [
    { text: "–û–±–ª–∞—Å—Ç–∏", icon: <PublicIcon />, path: "/regions" },
    { text: "–ì–æ—Ä–æ–¥–∞ –∏ —Ä–∞–π–æ–Ω—ã", icon: <LocationCityIcon />, path: "/cities" },
  ];

  const docsTimedItems = [
    {
      text: "–î–æ–∫—É–º–µ–Ω—Ç—ã –ø–æ —Ç–∏–ø–∞–º",
      icon: <DescriptionIcon />,
      path: "/docdeadline",
    },
    {
      text: "–î–æ–∫—É–º–µ–Ω—Ç—ã –ø–æ —Å—Ç–∞–Ω—Ü–∏—è–º",
      icon: <LocalGasStationIcon />,
      path: "/docbystation",
    },
  ];

  const docsPerpItems = [
    {
      text: "–î–æ–∫—É–º–µ–Ω—Ç—ã –ø–æ —Ç–∏–ø–∞–º",
      icon: <DescriptionIcon />,
      path: "/docdeadlineinf",
    },
    {
      text: "–î–æ–∫—É–º–µ–Ω—Ç—ã –ø–æ —Å—Ç–∞–Ω—Ü–∏—è–º",
      icon: <LocalGasStationIcon />,
      path: "/docbystationinf",
    },
  ];

  // ‚öôÔ∏è –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø—É–Ω–∫—Ç–æ–≤ –ø–æ —Ä–æ–ª–∏
  const filteredMenuItems =
    role === "admin"
      ? menuItems
      : role === "buxgalter"
      ? menuItems.filter((item) => item.text === "–ü–∞—Ä—Ç–Ω—ë—Ä—ã")
      : [];

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å rahbar –∏–ª–∏ booker
  const isRahbarOrBooker = role === "rahbar" || role === "buxgalter";

  // –ë–µ–π–¥–∂ —Ä–æ–ª–∏ —Å —Ü–≤–µ—Ç–∞–º–∏
  const getRoleBadge = () => {
    const roleConfig = {
      admin: { color: "#ef4444", text: "–ê–¥–º–∏–Ω" },
      buxgalter: { color: "#10b981", text: "–ë—É—Ö–≥–∞–ª—Ç–µ—Ä" },
      operator: { color: "#3b82f6", text: "–û–ø–µ—Ä–∞—Ç–æ—Ä" },
      rahbar: { color: "#8b5cf6", text: "–†–∞—Ö–±–∞—Ä" },
    };

    const config = roleConfig[role] || { color: "#6b7280", text: role };

    return (
      <Box
        sx={{
          display: "inline-flex",
          alignItems: "center",
          px: 1.5,
          py: 0.5,
          borderRadius: "12px",
          backgroundColor: `${config.color}15`,
          border: `1px solid ${config.color}30`,
          color: config.color,
          fontSize: "0.75rem",
          fontWeight: "600",
          ml: 1,
        }}>
        {config.text}
      </Box>
    );
  };

  return (
    <Box sx={{ flexGrow: 1 }}>
      <AppBar
        position="static"
        sx={{
          background: "linear-gradient(135deg, #667eea 0%, #764ba2 100%)",
          boxShadow: "0 4px 20px rgba(0,0,0,0.1)",
        }}>
        <Toolbar sx={{ minHeight: { xs: "64px", md: "70px" } }}>
          {/* –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –º–µ–Ω—é –¥–ª—è admin, buxgalter –∏ operator */}
          {role === "admin" ||
          role === "buxgalter" ||
          role === "operator" ||
          role === "rahbar" ? (
            <IconButton
              size="large"
              edge="start"
              color="inherit"
              aria-label="menu"
              sx={{
                mr: 2,
                transition: "all 0.3s cubic-bezier(0.4, 0, 0.2, 1)",
                "&:hover": {
                  transform: "rotate(90deg)",
                  backgroundColor: "rgba(255,255,255,0.1)",
                },
              }}
              onClick={toggleDrawer(true)}>
              <MenuIcon />
            </IconButton>
          ) : null}

          <Box sx={{ display: "flex", alignItems: "center", flexGrow: 1 }}>
            <Typography
              variant="h6"
              component="div"
              onClick={() => navigate("/")}
              sx={{
                cursor: "pointer",
                fontWeight: "700",
                background: "linear-gradient(45deg, #ffffff, #e0e7ff)",
                backgroundClip: "text",
                WebkitBackgroundClip: "text",
                WebkitTextFillColor: "transparent",
                transition: "all 0.3s ease",
                "&:hover": {
                  transform: "translateY(-1px)",
                  filter: "brightness(1.1)",
                },
                fontSize: { xs: "1.1rem", md: "1.25rem" },
                display: "flex",
                alignItems: "center",
                gap: 1,
              }}>
              <DashboardIcon
                sx={{ fontSize: { xs: "1.2rem", md: "1.5rem" } }}
              />
              –ú–µ—Ç–∞–Ω –°–∏—Å—Ç–µ–º–∞
            </Typography>

            {/* –ë–µ–π–¥–∂ —Ä–æ–ª–∏ –Ω–∞ –¥–µ—Å–∫—Ç–æ–ø–µ */}
            {!isMobile && getRoleBadge()}
          </Box>

          {/* –ö–Ω–æ–ø–∫–∏ –¥–ª—è rahbar –∏ booker */}
          {isRahbarOrBooker && !isMobile && (
            <Box sx={{ display: "flex", gap: 1, mr: 3 }}>
              <Button
                color="inherit"
                onClick={() => navigate("/employeesdocdeadline")}
                sx={{
                  textTransform: "none",
                  borderRadius: "25px",
                  padding: "8px 20px",
                  transition: "all 0.3s ease",
                  background: "rgba(255,255,255,0.1)",
                  backdropFilter: "blur(10px)",
                  border: "1px solid rgba(255,255,255,0.2)",
                  "&:hover": {
                    backgroundColor: "rgba(255, 255, 255, 0.2)",
                    transform: "translateY(-2px)",
                    boxShadow: "0 4px 12px rgba(0,0,0,0.15)",
                  },
                  fontSize: "0.9rem",
                  fontWeight: "500",
                }}>
                üìÑ –î–æ–∫—É–º–µ–Ω—Ç—ã —Å–æ —Å—Ä–æ–∫–æ–º
              </Button>
              <Button
                color="inherit"
                onClick={() => navigate("/employeesdocdeadlineinf")}
                sx={{
                  textTransform: "none",
                  borderRadius: "25px",
                  padding: "8px 20px",
                  transition: "all 0.3s ease",
                  background: "rgba(255,255,255,0.1)",
                  backdropFilter: "blur(10px)",
                  border: "1px solid rgba(255,255,255,0.2)",
                  "&:hover": {
                    backgroundColor: "rgba(255, 255, 255, 0.2)",
                    transform: "translateY(-2px)",
                    boxShadow: "0 4px 12px rgba(0,0,0,0.15)",
                  },
                  fontSize: "0.9rem",
                  fontWeight: "500",
                }}>
                ‚àû –ë–µ—Å—Å—Ä–æ—á–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã
              </Button>
            </Box>
          )}

          {/* –ö–Ω–æ–ø–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è */}
          {userData && (
            <Button
              onClick={handleUserButtonClick}
              color="inherit"
              sx={{
                display: "flex",
                alignItems: "center",
                gap: 1,
                mr: 2,
                textTransform: "none",
                borderRadius: "25px",
                padding: { xs: "6px 12px", md: "8px 16px" },
                transition: "all 0.3s ease",
                background: "rgba(255,255,255,0.1)",
                backdropFilter: "blur(10px)",
                border: "1px solid rgba(255,255,255,0.2)",
                "&:hover": {
                  backgroundColor: "rgba(255, 255, 255, 0.2)",
                  transform: "translateY(-2px)",
                  boxShadow: "0 4px 12px rgba(0,0,0,0.15)",
                },
                minWidth: "auto",
              }}>
              <PersonIcon sx={{ fontSize: { xs: 18, md: 20 } }} />
              <Typography
                variant="body1"
                sx={{
                  fontWeight: "500",
                  fontSize: { xs: "0.8rem", md: "0.9rem" },
                  maxWidth: { xs: "80px", sm: "120px", md: "150px" },
                  overflow: "hidden",
                  textOverflow: "ellipsis",
                  whiteSpace: "nowrap",
                  display: { xs: "none", sm: "block" },
                }}>
                {isMobile ? getShortName() : getUserFullName()}
              </Typography>
              {/* –ë–µ–π–¥–∂ —Ä–æ–ª–∏ –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö */}
              {isMobile && getRoleBadge()}
            </Button>
          )}

          {/* –ö–Ω–æ–ø–∫–∞ –≤—ã—Ö–æ–¥–∞ */}
          <Button
            onClick={signOutProfile}
            color="inherit"
            sx={{
              borderRadius: "25px",
              padding: { xs: "6px 12px", md: "8px 20px" },
              transition: "all 0.3s ease",
              background: "rgba(255,255,255,0.1)",
              backdropFilter: "blur(10px)",
              border: "1px solid rgba(255,255,255,0.2)",
              "&:hover": {
                backgroundColor: "rgba(255, 59, 59, 0.3)",
                transform: "translateY(-2px)",
                boxShadow: "0 4px 12px rgba(0,0,0,0.15)",
              },
              fontWeight: "600",
              fontSize: { xs: "0.8rem", md: "0.9rem" },
              display: "flex",
              alignItems: "center",
              gap: 1,
            }}>
            {!isMobile && <LogoutIcon sx={{ fontSize: 18 }} />}
            {isMobile ? "–í—ã—Ö–æ–¥" : "–ß–ò“ö–ò–®"}
          </Button>
        </Toolbar>
      </AppBar>

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è */}
      {userModalOpen && userData && (
        <UserModal
          user={{
            id: userData.uid || user?.uid,
            email: userData.email,
            displayName: userData.displayName,
            firstName: userData.firstName,
            lastName: userData.lastName,
            middleName: userData.middleName,
            birthday: userData.birthday,
            pinfl: userData.pinfl,
            passportSeries: userData.passportSeries,
            passportNumber: userData.passportNumber,
            address: userData.address,
            role: userData.role,
            accessEndDate: userData.accessEndDate,
            stations: userData.stations || [],
          }}
          onClose={handleUserModalClose}
          onUserUpdated={handleUserUpdated}
          readOnly={true}
        />
      )}

      {/* –ë–æ–∫–æ–≤–æ–µ –º–µ–Ω—é */}
      {(role === "admin" ||
        role === "buxgalter" ||
        role === "operator" ||
        role === "rahbar") && (
        <Drawer
          anchor="left"
          open={drawerOpen}
          onClose={toggleDrawer(false)}
          sx={{
            "& .MuiDrawer-paper": {
              width: { xs: "280px", sm: "320px" },
              boxSizing: "border-box",
              overflow: "hidden",
              background: "linear-gradient(180deg, #2d3748 0%, #4a5568 100%)",
              color: "white",
            },
          }}>
          <Paper
            sx={{
              width: "100%",
              height: "100%",
              display: "flex",
              flexDirection: "column",
              background: "transparent",
            }}>
            {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –º–µ–Ω—é */}
            <Box
              sx={{
                display: "flex",
                alignItems: "center",
                justifyContent: "space-between",
                padding: "20px 16px",
                background:
                  "linear-gradient(135deg, rgba(102, 126, 234, 0.9) 0%, rgba(118, 75, 162, 0.9) 100%)",
                color: "white",
                backdropFilter: "blur(10px)",
              }}>
              <Typography
                variant="h6"
                sx={{ fontWeight: "700", fontSize: "1.1rem" }}>
                üóÇÔ∏è –ú–µ–Ω—é –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
              </Typography>
              <IconButton
                onClick={toggleDrawer(false)}
                sx={{
                  color: "white",
                  transition: "all 0.3s ease",
                  "&:hover": {
                    backgroundColor: "rgba(255,255,255,0.1)",
                    transform: "rotate(90deg)",
                  },
                }}>
                <CloseIcon />
              </IconButton>
            </Box>

            <Divider sx={{ borderColor: "rgba(255,255,255,0.1)" }} />

            {/* –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –º–µ–Ω—é */}
            <Box sx={{ flex: 1, overflow: "auto", py: 1 }}>
              <List sx={{ padding: "8px" }}>
                {/* üîπ –û—Å–Ω–æ–≤–Ω—ã–µ –ø—É–Ω–∫—Ç—ã (—Ç–æ–ª—å–∫–æ –¥–ª—è admin –∏ buxgalter) */}
                {(role === "admin" ||
                  role === "buxgalter" ||
                  role === "rahbar") && (
                  <>
                    {filteredMenuItems.map((item, index) => (
                      <motion.div
                        key={item.text}
                        initial={{ opacity: 0, x: -20 }}
                        animate={{ opacity: 1, x: 0 }}
                        transition={{ delay: index * 0.1 }}>
                        <ListItem disablePadding sx={{ mb: 1 }}>
                          <ListItemButton
                            onClick={() => handleMenuClick(item.path)}
                            sx={{
                              borderRadius: "12px",
                              py: 1.5,
                              transition: "all 0.3s ease",
                              "&:hover": {
                                backgroundColor: "rgba(255,255,255,0.1)",
                                transform: "translateX(5px)",
                              },
                            }}>
                            <ListItemIcon
                              sx={{ minWidth: "45px", color: "white" }}>
                              {item.icon}
                            </ListItemIcon>
                            <ListItemText
                              primary={item.text}
                              primaryTypographyProps={{
                                fontSize: "15px",
                                fontWeight: "500",
                                color: "white",
                              }}
                            />
                          </ListItemButton>
                        </ListItem>
                      </motion.div>
                    ))}
                  </>
                )}

                {/* üîπ –ü–∞—Ä—Ç–Ω–µ—Ä—ã (—Ç–æ–ª—å–∫–æ –¥–ª—è admin –∏ buxgalter) */}
                {(role === "admin" ||
                  role === "buxgalter" ||
                  role === "rahbar") && (
                  <>
                    <ListItem disablePadding sx={{ mb: 1 }}>
                      <ListItemButton
                        onClick={handlePartnersClick}
                        sx={{
                          borderRadius: "12px",
                          py: 1.5,
                          transition: "all 0.3s ease",
                          "&:hover": {
                            backgroundColor: "rgba(255,255,255,0.1)",
                          },
                        }}>
                        <ListItemIcon sx={{ color: "white" }}>
                          <HandshakeIcon />
                        </ListItemIcon>
                        <ListItemText
                          primary="ü§ù –ü–∞—Ä—Ç–Ω—ë—Ä—ã"
                          primaryTypographyProps={{ fontWeight: "500" }}
                        />
                        {partnersOpen ? <ExpandLess /> : <ExpandMore />}
                      </ListItemButton>
                    </ListItem>
                    <Collapse in={partnersOpen} timeout="auto" unmountOnExit>
                      <List component="div" disablePadding>
                        {partnersItems.map((item) => (
                          <ListItem
                            key={item.text}
                            disablePadding
                            sx={{ pl: 2 }}>
                            <ListItemButton
                              onClick={() => handleMenuClick(item.path)}
                              sx={{
                                borderRadius: "8px",
                                py: 1.2,
                                transition: "all 0.3s ease",
                                "&:hover": {
                                  backgroundColor: "rgba(255,255,255,0.08)",
                                  transform: "translateX(5px)",
                                },
                              }}>
                              <ListItemIcon
                                sx={{
                                  minWidth: "40px",
                                  color: "rgba(255,255,255,0.8)",
                                }}>
                                {item.icon}
                              </ListItemIcon>
                              <ListItemText
                                primary={item.text}
                                primaryTypographyProps={{
                                  fontSize: "14px",
                                  color: "rgba(255,255,255,0.9)",
                                }}
                              />
                            </ListItemButton>
                          </ListItem>
                        ))}
                      </List>
                    </Collapse>
                  </>
                )}

                {/* üîπ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –æ—Ç—á–µ—Ç—ã (–¥–ª—è admin, buxgalter –∏ operator) */}
                {(role === "admin" ||
                  role === "buxgalter" ||
                  role === "operator" ||
                  role === "rahbar") && (
                  <>
                    <ListItem disablePadding sx={{ mb: 1 }}>
                      <ListItemButton
                        onClick={handleDailyReportsClick}
                        sx={{
                          borderRadius: "12px",
                          py: 1.5,
                          transition: "all 0.3s ease",
                          "&:hover": {
                            backgroundColor: "rgba(255,255,255,0.1)",
                          },
                        }}>
                        <ListItemIcon sx={{ color: "white" }}>
                          <SummarizeIcon />
                        </ListItemIcon>
                        <ListItemText
                          primary="üìä –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –æ—Ç—á–µ—Ç—ã"
                          primaryTypographyProps={{ fontWeight: "500" }}
                        />
                        {dailyReportsOpen ? <ExpandLess /> : <ExpandMore />}
                      </ListItemButton>
                    </ListItem>
                    <Collapse
                      in={dailyReportsOpen}
                      timeout="auto"
                      unmountOnExit>
                      <List component="div" disablePadding>
                        {dailyReportsItems.map((item) => (
                          <ListItem
                            key={item.text}
                            disablePadding
                            sx={{ pl: 2 }}>
                            <ListItemButton
                              onClick={() => handleMenuClick(item.path)}
                              sx={{
                                borderRadius: "8px",
                                py: 1.2,
                                transition: "all 0.3s ease",
                                "&:hover": {
                                  backgroundColor: "rgba(255,255,255,0.08)",
                                  transform: "translateX(5px)",
                                },
                              }}>
                              <ListItemIcon
                                sx={{
                                  minWidth: "40px",
                                  color: "rgba(255,255,255,0.8)",
                                }}>
                                {item.icon}
                              </ListItemIcon>
                              <ListItemText
                                primary={item.text}
                                primaryTypographyProps={{
                                  fontSize: "14px",
                                  color: "rgba(255,255,255,0.9)",
                                }}
                              />
                            </ListItemButton>
                          </ListItem>
                        ))}
                      </List>
                    </Collapse>
                  </>
                )}

                {/* üîπ –î–æ–∫—É–º–µ–Ω—Ç—ã (–¥–ª—è admin –∏ buxgalter) */}
                {role === "admin" && (
                  <>
                    <ListItem disablePadding sx={{ mb: 1 }}>
                      <ListItemButton
                        onClick={handleDocumentsClick}
                        sx={{
                          borderRadius: "12px",
                          py: 1.5,
                          transition: "all 0.3s ease",
                          "&:hover": {
                            backgroundColor: "rgba(255,255,255,0.1)",
                          },
                        }}>
                        <ListItemIcon sx={{ color: "white" }}>
                          <DescriptionIcon />
                        </ListItemIcon>
                        <ListItemText
                          primary="üìë –î–æ–∫—É–º–µ–Ω—Ç—ã"
                          primaryTypographyProps={{ fontWeight: "500" }}
                        />
                        {documentsOpen ? <ExpandLess /> : <ExpandMore />}
                      </ListItemButton>
                    </ListItem>
                    <Collapse in={documentsOpen} timeout="auto" unmountOnExit>
                      <List component="div" disablePadding>
                        <ListItem disablePadding sx={{ pl: 2 }}>
                          <ListItemButton
                            onClick={() => handleMenuClick("/doctypepage")}
                            sx={{
                              borderRadius: "8px",
                              py: 1.2,
                              transition: "all 0.3s ease",
                              "&:hover": {
                                backgroundColor: "rgba(255,255,255,0.08)",
                                transform: "translateX(5px)",
                              },
                            }}>
                            <ListItemIcon
                              sx={{ color: "rgba(255,255,255,0.8)" }}>
                              <CategoryIcon />
                            </ListItemIcon>
                            <ListItemText
                              primary="–¢–∏–ø—ã –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"
                              primaryTypographyProps={{
                                fontSize: "14px",
                                color: "rgba(255,255,255,0.9)",
                              }}
                            />
                          </ListItemButton>
                        </ListItem>

                        <Divider
                          sx={{ my: 1, borderColor: "rgba(255,255,255,0.1)" }}
                        />

                        <ListItem disablePadding sx={{ pl: 2 }}>
                          <ListItemButton
                            onClick={handleDocsTimedClick}
                            sx={{
                              borderRadius: "8px",
                              py: 1.2,
                              transition: "all 0.3s ease",
                              "&:hover": {
                                backgroundColor: "rgba(255,255,255,0.08)",
                              },
                            }}>
                            <ListItemIcon
                              sx={{ color: "rgba(255,255,255,0.8)" }}>
                              <ScheduleIcon />
                            </ListItemIcon>
                            <ListItemText
                              primary="–î–æ–∫—É–º–µ–Ω—Ç—ã —Å–æ —Å—Ä–æ–∫–æ–º"
                              primaryTypographyProps={{
                                fontSize: "14px",
                                color: "rgba(255,255,255,0.9)",
                              }}
                            />
                            {docsTimedOpen ? <ExpandLess /> : <ExpandMore />}
                          </ListItemButton>
                        </ListItem>
                        <Collapse
                          in={docsTimedOpen}
                          timeout="auto"
                          unmountOnExit>
                          <List component="div" disablePadding>
                            {docsTimedItems.map((item) => (
                              <ListItem
                                key={item.text}
                                disablePadding
                                sx={{ pl: 4 }}>
                                <ListItemButton
                                  onClick={() => handleMenuClick(item.path)}
                                  sx={{
                                    borderRadius: "6px",
                                    py: 1,
                                    transition: "all 0.3s ease",
                                    "&:hover": {
                                      backgroundColor: "rgba(255,255,255,0.06)",
                                      transform: "translateX(5px)",
                                    },
                                  }}>
                                  <ListItemIcon
                                    sx={{ color: "rgba(255,255,255,0.7)" }}>
                                    {item.icon}
                                  </ListItemIcon>
                                  <ListItemText
                                    primary={item.text}
                                    primaryTypographyProps={{
                                      fontSize: "13px",
                                      color: "rgba(255,255,255,0.8)",
                                    }}
                                  />
                                </ListItemButton>
                              </ListItem>
                            ))}
                          </List>
                        </Collapse>

                        <Divider
                          sx={{ my: 1, borderColor: "rgba(255,255,255,0.1)" }}
                        />

                        <ListItem disablePadding sx={{ pl: 2 }}>
                          <ListItemButton
                            onClick={handleDocsPerpClick}
                            sx={{
                              borderRadius: "8px",
                              py: 1.2,
                              transition: "all 0.3s ease",
                              "&:hover": {
                                backgroundColor: "rgba(255,255,255,0.08)",
                              },
                            }}>
                            <ListItemIcon
                              sx={{ color: "rgba(255,255,255,0.8)" }}>
                              <AllInclusiveIcon />
                            </ListItemIcon>
                            <ListItemText
                              primary="–ë–µ—Å—Å—Ä–æ—á–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã"
                              primaryTypographyProps={{
                                fontSize: "14px",
                                color: "rgba(255,255,255,0.9)",
                              }}
                            />
                            {docsPerpOpen ? <ExpandLess /> : <ExpandMore />}
                          </ListItemButton>
                        </ListItem>
                        <Collapse
                          in={docsPerpOpen}
                          timeout="auto"
                          unmountOnExit>
                          <List component="div" disablePadding>
                            {docsPerpItems.map((item) => (
                              <ListItem
                                key={item.text}
                                disablePadding
                                sx={{ pl: 4 }}>
                                <ListItemButton
                                  onClick={() => handleMenuClick(item.path)}
                                  sx={{
                                    borderRadius: "6px",
                                    py: 1,
                                    transition: "all 0.3s ease",
                                    "&:hover": {
                                      backgroundColor: "rgba(255,255,255,0.06)",
                                      transform: "translateX(5px)",
                                    },
                                  }}>
                                  <ListItemIcon
                                    sx={{ color: "rgba(255,255,255,0.7)" }}>
                                    {item.icon}
                                  </ListItemIcon>
                                  <ListItemText
                                    primary={item.text}
                                    primaryTypographyProps={{
                                      fontSize: "13px",
                                      color: "rgba(255,255,255,0.8)",
                                    }}
                                  />
                                </ListItemButton>
                              </ListItem>
                            ))}
                          </List>
                        </Collapse>
                      </List>
                    </Collapse>
                  </>
                )}

                {/* üîπ –û—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ–Ω—é —Ç–æ–ª—å–∫–æ –¥–ª—è admin */}
                {role === "admin" && (
                  <>
                    {/* –†–µ–≥–∏–æ–Ω—ã */}
                    <ListItem disablePadding sx={{ mb: 1 }}>
                      <ListItemButton
                        onClick={handleRegionsClick}
                        sx={{
                          borderRadius: "12px",
                          py: 1.5,
                          transition: "all 0.3s ease",
                          "&:hover": {
                            backgroundColor: "rgba(255,255,255,0.1)",
                          },
                        }}>
                        <ListItemIcon sx={{ color: "white" }}>
                          <MapIcon />
                        </ListItemIcon>
                        <ListItemText
                          primary="üó∫Ô∏è –†–µ–≥–∏–æ–Ω—ã"
                          primaryTypographyProps={{ fontWeight: "500" }}
                        />
                        {regionsOpen ? <ExpandLess /> : <ExpandMore />}
                      </ListItemButton>
                    </ListItem>
                    <Collapse in={regionsOpen} timeout="auto" unmountOnExit>
                      <List component="div" disablePadding>
                        {regionsItems.map((item) => (
                          <ListItem
                            key={item.text}
                            disablePadding
                            sx={{ pl: 2 }}>
                            <ListItemButton
                              onClick={() => handleMenuClick(item.path)}
                              sx={{
                                borderRadius: "8px",
                                py: 1.2,
                                transition: "all 0.3s ease",
                                "&:hover": {
                                  backgroundColor: "rgba(255,255,255,0.08)",
                                  transform: "translateX(5px)",
                                },
                              }}>
                              <ListItemIcon
                                sx={{ color: "rgba(255,255,255,0.8)" }}>
                                {item.icon}
                              </ListItemIcon>
                              <ListItemText
                                primary={item.text}
                                primaryTypographyProps={{
                                  fontSize: "14px",
                                  color: "rgba(255,255,255,0.9)",
                                }}
                              />
                            </ListItemButton>
                          </ListItem>
                        ))}
                      </List>
                    </Collapse>

                    {/* –û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ */}
                    <ListItem disablePadding sx={{ mb: 1 }}>
                      <ListItemButton
                        onClick={handleEquipmentClick}
                        sx={{
                          borderRadius: "12px",
                          py: 1.5,
                          transition: "all 0.3s ease",
                          "&:hover": {
                            backgroundColor: "rgba(255,255,255,0.1)",
                          },
                        }}>
                        <ListItemIcon sx={{ color: "white" }}>
                          <BuildIcon />
                        </ListItemIcon>
                        <ListItemText
                          primary="‚öôÔ∏è –û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è"
                          primaryTypographyProps={{ fontWeight: "500" }}
                        />
                        {equipmentOpen ? <ExpandLess /> : <ExpandMore />}
                      </ListItemButton>
                    </ListItem>
                    <Collapse in={equipmentOpen} timeout="auto" unmountOnExit>
                      <List component="div" disablePadding>
                        <ListItem disablePadding sx={{ pl: 2 }}>
                          <ListItemButton
                            onClick={handleEquipmentDetailsClick}
                            sx={{
                              borderRadius: "8px",
                              py: 1.2,
                              transition: "all 0.3s ease",
                              "&:hover": {
                                backgroundColor: "rgba(255,255,255,0.08)",
                              },
                            }}>
                            <ListItemIcon
                              sx={{ color: "rgba(255,255,255,0.8)" }}>
                              <SettingsInputComponentIcon />
                            </ListItemIcon>
                            <ListItemText
                              primary="–°–≤–µ–¥–µ–Ω–∏—è –æ–± –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è—Ö"
                              primaryTypographyProps={{
                                fontSize: "14px",
                                color: "rgba(255,255,255,0.9)",
                              }}
                            />
                            {equipmentDetailsOpen ? (
                              <ExpandLess />
                            ) : (
                              <ExpandMore />
                            )}
                          </ListItemButton>
                        </ListItem>
                        <Collapse
                          in={equipmentDetailsOpen}
                          timeout="auto"
                          unmountOnExit>
                          <List component="div" disablePadding>
                            {equipmentDetailsItems.map((item) => (
                              <ListItem
                                key={item.text}
                                disablePadding
                                sx={{ pl: 4 }}>
                                <ListItemButton
                                  onClick={() => handleMenuClick(item.path)}
                                  sx={{
                                    borderRadius: "6px",
                                    py: 1,
                                    transition: "all 0.3s ease",
                                    "&:hover": {
                                      backgroundColor: "rgba(255,255,255,0.06)",
                                      transform: "translateX(5px)",
                                    },
                                  }}>
                                  <ListItemIcon
                                    sx={{ color: "rgba(255,255,255,0.7)" }}>
                                    {item.icon}
                                  </ListItemIcon>
                                  <ListItemText
                                    primary={item.text}
                                    primaryTypographyProps={{
                                      fontSize: "13px",
                                      color: "rgba(255,255,255,0.8)",
                                    }}
                                  />
                                </ListItemButton>
                              </ListItem>
                            ))}
                          </List>
                        </Collapse>

                        {/* –¢–∏–ø—ã –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è */}
                        <ListItem disablePadding sx={{ pl: 2 }}>
                          <ListItemButton
                            onClick={handleEquipmentTypesClick}
                            sx={{
                              borderRadius: "8px",
                              py: 1.2,
                              transition: "all 0.3s ease",
                              "&:hover": {
                                backgroundColor: "rgba(255,255,255,0.08)",
                              },
                            }}>
                            <ListItemIcon
                              sx={{ color: "rgba(255,255,255,0.8)" }}>
                              <CategoryIcon />
                            </ListItemIcon>
                            <ListItemText
                              primary="–¢–∏–ø—ã –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è"
                              primaryTypographyProps={{
                                fontSize: "14px",
                                color: "rgba(255,255,255,0.9)",
                              }}
                            />
                            {equipmentTypesOpen ? (
                              <ExpandLess />
                            ) : (
                              <ExpandMore />
                            )}
                          </ListItemButton>
                        </ListItem>
                        <Collapse
                          in={equipmentTypesOpen}
                          timeout="auto"
                          unmountOnExit>
                          <List component="div" disablePadding>
                            {equipmentTypesItems.map((item) => (
                              <ListItem
                                key={item.text}
                                disablePadding
                                sx={{ pl: 4 }}>
                                <ListItemButton
                                  onClick={() => handleMenuClick(item.path)}
                                  sx={{
                                    borderRadius: "6px",
                                    py: 1,
                                    transition: "all 0.3s ease",
                                    "&:hover": {
                                      backgroundColor: "rgba(255,255,255,0.06)",
                                      transform: "translateX(5px)",
                                    },
                                  }}>
                                  <ListItemIcon
                                    sx={{ color: "rgba(255,255,255,0.7)" }}>
                                    {item.icon}
                                  </ListItemIcon>
                                  <ListItemText
                                    primary={item.text}
                                    primaryTypographyProps={{
                                      fontSize: "13px",
                                      color: "rgba(255,255,255,0.8)",
                                    }}
                                  />
                                </ListItemButton>
                              </ListItem>
                            ))}
                          </List>
                        </Collapse>
                      </List>
                    </Collapse>
                  </>
                )}
              </List>
            </Box>
          </Paper>
        </Drawer>
      )}
    </Box>
  );
}
