import * as React from "react";
import AppBar from "@mui/material/AppBar";
import Box from "@mui/material/Box";
import Toolbar from "@mui/material/Toolbar";
import Typography from "@mui/material/Typography";
import Button from "@mui/material/Button";
import IconButton from "@mui/material/IconButton";
import MenuIcon from "@mui/icons-material/Menu";
import { signOut } from "firebase/auth";
import { auth } from "../firebase/config";
import { toast } from "react-toastify";
import { useAppStore } from "../lib/zustand";
import { motion } from "framer-motion";
import { Paper } from "@mui/material";
import Drawer from "@mui/material/Drawer";
import List from "@mui/material/List";
import ListItem from "@mui/material/ListItem";
import ListItemButton from "@mui/material/ListItemButton";
import ListItemIcon from "@mui/material/ListItemIcon";
import ListItemText from "@mui/material/ListItemText";
import Divider from "@mui/material/Divider";
import { useTheme } from "@mui/material/styles";
import {
  LocalGasStation as LocalGasStationIcon,
  People as PeopleIcon,
  CorporateFare as CorporateFareIcon,
  AccountBalance as AccountBalanceIcon,
  Close as CloseIcon,
  Build as BuildIcon,
  ExpandLess,
  ExpandMore,
  SettingsInputComponent as SettingsInputComponentIcon,
  Category as CategoryIcon,
  AcUnit as CompressorIcon,
  WaterDrop as DehumidifierIcon,
  DeviceThermostat as ChillerIcon,
  Map as MapIcon,
  LocationCity as LocationCityIcon,
  Public as PublicIcon,
  Description as DescriptionIcon,
  Schedule as ScheduleIcon,
  AllInclusive as AllInclusiveIcon,
  Badge as BadgeIcon,
  Handshake as HandshakeIcon,
  List as ListIcon,
  Assignment as AssignmentIcon,
  Summarize as SummarizeIcon, // –ò–∫–æ–Ω–∫–∞ –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤
} from "@mui/icons-material";
import { useNavigate } from "react-router-dom";
import Collapse from "@mui/material/Collapse";

export default function Navbar() {
  const MotionPaper = motion.create(Paper);
  const setUser = useAppStore((state) => state.setUser);
  const user = useAppStore((state) => state.user);
  const userData = useAppStore((state) => state.userData);
  const role = userData?.role; // ‚úÖ –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const [drawerOpen, setDrawerOpen] = React.useState(false);
  const [equipmentOpen, setEquipmentOpen] = React.useState(false);
  const [equipmentDetailsOpen, setEquipmentDetailsOpen] = React.useState(false);
  const [equipmentTypesOpen, setEquipmentTypesOpen] = React.useState(false);
  const [regionsOpen, setRegionsOpen] = React.useState(false);
  const [documentsOpen, setDocumentsOpen] = React.useState(false);
  const [docsTimedOpen, setDocsTimedOpen] = React.useState(false);
  const [docsPerpOpen, setDocsPerpOpen] = React.useState(false);
  const [partnersOpen, setPartnersOpen] = React.useState(false);
  const [dailyReportsOpen, setDailyReportsOpen] = React.useState(false); // –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤

  const navigate = useNavigate();
  const theme = useTheme();

  const signOutProfile = async () => {
    await signOut(auth);
    setUser(null);
    toast.success("See you later");
  };

  const toggleDrawer = (open) => (event) => {
    if (
      event?.type === "keydown" &&
      (event.key === "Tab" || event.key === "Shift")
    )
      return;
    setDrawerOpen(open);
    if (!open) {
      setEquipmentOpen(false);
      setEquipmentDetailsOpen(false);
      setEquipmentTypesOpen(false);
      setRegionsOpen(false);
      setDocumentsOpen(false);
      setDocsTimedOpen(false);
      setDocsPerpOpen(false);
      setPartnersOpen(false);
      setDailyReportsOpen(false); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤
    }
  };

  const handleMenuClick = (path) => {
    setDrawerOpen(false);
    navigate(path);
  };

  const handleEquipmentClick = () => setEquipmentOpen(!equipmentOpen);
  const handleEquipmentDetailsClick = () =>
    setEquipmentDetailsOpen(!equipmentDetailsOpen);
  const handleEquipmentTypesClick = () =>
    setEquipmentTypesOpen(!equipmentTypesOpen);
  const handleRegionsClick = () => setRegionsOpen(!regionsOpen);
  const handleDocumentsClick = () => setDocumentsOpen(!documentsOpen);
  const handleDocsTimedClick = () => setDocsTimedOpen(!docsTimedOpen);
  const handleDocsPerpClick = () => setDocsPerpOpen(!docsPerpOpen);
  const handlePartnersClick = () => setPartnersOpen(!partnersOpen);
  const handleDailyReportsClick = () => setDailyReportsOpen(!dailyReportsOpen); // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤

  // üîπ –ú–µ–Ω—é
  const menuItems = [
    { text: "–°—Ç–∞–Ω—Ü–∏–∏", icon: <LocalGasStationIcon />, path: "/stations" },
    { text: "–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏", icon: <BadgeIcon />, path: "/employees" },
    { text: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", icon: <PeopleIcon />, path: "/users" },
    { text: "–û–û–û", icon: <CorporateFareIcon />, path: "/ltds" },
    { text: "–ë–∞–Ω–∫", icon: <AccountBalanceIcon />, path: "/banks" },
  ];

  const partnersItems = [
    {
      text: "–°–ø–∏—Å–æ–∫ –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤",
      icon: <ListIcon />,
      path: "/partners",
    },
    {
      text: "–°–ø–∏—Å–æ–∫ –¥–æ–≥–æ–≤–æ—Ä–æ–≤",
      icon: <AssignmentIcon />,
      path: "/partnerslist",
    },
  ];

  // üîπ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –æ—Ç—á–µ—Ç—ã
  const dailyReportsItems = [
    {
      text: "–û–±—â–∏–π –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç",
      icon: <SummarizeIcon />,
      path: "/generaldailyreport",
    },
  ];

  const equipmentDetailsItems = [
    {
      text: "–°–≤–µ–¥–µ–Ω–∏—è –æ –∫–æ–º–ø—Ä–µ—Å—Å–æ—Ä–∞—Ö",
      icon: <CompressorIcon />,
      path: "/compressors",
    },
    {
      text: "–°–≤–µ–¥–µ–Ω–∏—è –æ –∫–æ–ª–æ–Ω–∫–∞—Ö",
      icon: <LocalGasStationIcon />,
      path: "/dispensers",
    },
    {
      text: "–°–≤–µ–¥–µ–Ω–∏—è –æ–± –æ—Å—É—à–∫–∞—Ö",
      icon: <DehumidifierIcon />,
      path: "/osushka",
    },
    { text: "–°–≤–µ–¥–µ–Ω–∏—è –æ —á–∏–ª–ª–µ—Ä–∞—Ö", icon: <ChillerIcon />, path: "/chillers" },
  ];

  const equipmentTypesItems = [
    {
      text: "–¢–∏–ø—ã –∫–æ–º–ø—Ä–µ—Å—Å–æ—Ä–æ–≤",
      icon: <CompressorIcon />,
      path: "/typeofcompressors",
    },
    {
      text: "–¢–∏–ø—ã –∫–æ–ª–æ–Ω–æ–∫",
      icon: <LocalGasStationIcon />,
      path: "/typeofdispensers",
    },
    { text: "–¢–∏–ø—ã –æ—Å—É—à–æ–∫", icon: <DehumidifierIcon />, path: "/typeofosushka" },
    { text: "–¢–∏–ø—ã —á–∏–ª–ª–µ—Ä–æ–≤", icon: <ChillerIcon />, path: "/typeofchillers" },
  ];

  const regionsItems = [
    { text: "–û–±–ª–∞—Å—Ç–∏", icon: <PublicIcon />, path: "/regions" },
    { text: "–ì–æ—Ä–æ–¥–∞ –∏ —Ä–∞–π–æ–Ω—ã", icon: <LocationCityIcon />, path: "/cities" },
  ];

  const docsTimedItems = [
    {
      text: "–î–æ–∫—É–º–µ–Ω—Ç—ã –ø–æ —Ç–∏–ø–∞–º",
      icon: <DescriptionIcon />,
      path: "/docdeadline",
    },
    {
      text: "–î–æ–∫—É–º–µ–Ω—Ç—ã –ø–æ —Å—Ç–∞–Ω—Ü–∏—è–º",
      icon: <LocalGasStationIcon />,
      path: "/docbystation",
    },
  ];

  const docsPerpItems = [
    {
      text: "–î–æ–∫—É–º–µ–Ω—Ç—ã –ø–æ —Ç–∏–ø–∞–º",
      icon: <DescriptionIcon />,
      path: "/docdeadlineinf",
    },
    {
      text: "–î–æ–∫—É–º–µ–Ω—Ç—ã –ø–æ —Å—Ç–∞–Ω—Ü–∏—è–º",
      icon: <LocalGasStationIcon />,
      path: "/docbystationinf",
    },
  ];

  // ‚öôÔ∏è –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø—É–Ω–∫—Ç–æ–≤ –ø–æ —Ä–æ–ª–∏
  const filteredMenuItems =
    role === "admin"
      ? menuItems
      : role === "buxgalter"
      ? menuItems.filter((item) => item.text === "–ü–∞—Ä—Ç–Ω—ë—Ä—ã")
      : [];

  return (
    <Box sx={{ flexGrow: 1 }}>
      <AppBar position="static">
        <Toolbar>
          {/* –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –º–µ–Ω—é –¥–ª—è admin, buxgalter –∏ operator */}
          {role === "admin" || role === "buxgalter" || role === "operator" ? (
            <IconButton
              size="large"
              edge="start"
              color="inherit"
              aria-label="menu"
              sx={{
                mr: 2,
                transition: theme.transitions.create(["transform", "color"], {
                  duration: theme.transitions.duration.short,
                }),
                "&:hover": { transform: "rotate(90deg)" },
              }}
              onClick={toggleDrawer(true)}>
              <MenuIcon />
            </IconButton>
          ) : null}

          <Typography
            variant="h6"
            component="div"
            onClick={() => navigate("/")}
            sx={{
              flexGrow: 1,
              cursor: "pointer",
              fontWeight: "600",
              transition: "color 0.2s",
              "&:hover": { color: "#b3e5fc" },
            }}>
            –ú–µ—Ç–∞–Ω
          </Typography>

          <Button onClick={signOutProfile} color="inherit">
            –í—ã—Ö–æ–¥
          </Button>
        </Toolbar>
      </AppBar>

      {/* Drawer –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –¥–ª—è admin, buxgalter –∏ operator */}
      {(role === "admin" || role === "buxgalter" || role === "operator") && (
        <Drawer
          anchor="left"
          open={drawerOpen}
          onClose={toggleDrawer(false)}
          sx={{
            "& .MuiDrawer-paper": {
              width: 320,
              boxSizing: "border-box",
              overflow: "hidden",
            },
          }}>
          <Paper
            sx={{
              width: "100%",
              height: "100%",
              display: "flex",
              flexDirection: "column",
            }}>
            <Box
              sx={{
                display: "flex",
                alignItems: "center",
                justifyContent: "space-between",
                padding: "16px",
                backgroundColor: theme.palette.primary.main,
                color: "white",
              }}>
              <Typography variant="h6">–ú–µ–Ω—é</Typography>
              <IconButton onClick={toggleDrawer(false)} sx={{ color: "white" }}>
                <CloseIcon />
              </IconButton>
            </Box>

            <Divider />

            <Box sx={{ flex: 1, overflow: "auto" }}>
              <List sx={{ padding: "8px" }}>
                {/* üîπ –û—Å–Ω–æ–≤–Ω—ã–µ –ø—É–Ω–∫—Ç—ã (—Ç–æ–ª—å–∫–æ –¥–ª—è admin –∏ buxgalter) */}
                {(role === "admin" || role === "buxgalter") && (
                  <>
                    {filteredMenuItems.map((item, index) => (
                      <motion.div
                        key={item.text}
                        initial={{ opacity: 0, x: -20 }}
                        animate={{ opacity: 1, x: 0 }}
                        transition={{ delay: index * 0.1 }}>
                        <ListItem disablePadding sx={{ mb: 1 }}>
                          <ListItemButton
                            onClick={() => handleMenuClick(item.path)}
                            sx={{
                              borderRadius: "8px",
                              "&:hover": {
                                backgroundColor: theme.palette.action.hover,
                              },
                            }}>
                            <ListItemIcon sx={{ minWidth: "40px" }}>
                              {item.icon}
                            </ListItemIcon>
                            <ListItemText
                              primary={item.text}
                              primaryTypographyProps={{
                                fontSize: "15px",
                                fontWeight: "500",
                              }}
                            />
                          </ListItemButton>
                        </ListItem>
                      </motion.div>
                    ))}
                  </>
                )}

                {/* üîπ –ü–∞—Ä—Ç–Ω–µ—Ä—ã (—Ç–æ–ª—å–∫–æ –¥–ª—è admin –∏ buxgalter) */}
                {(role === "admin" || role === "buxgalter") && (
                  <>
                    <ListItem disablePadding sx={{ mb: 1 }}>
                      <ListItemButton onClick={handlePartnersClick}>
                        <ListItemIcon>
                          <HandshakeIcon />
                        </ListItemIcon>
                        <ListItemText primary="–ü–∞—Ä—Ç–Ω—ë—Ä—ã" />
                        {partnersOpen ? <ExpandLess /> : <ExpandMore />}
                      </ListItemButton>
                    </ListItem>
                    <Collapse in={partnersOpen} timeout="auto" unmountOnExit>
                      <List component="div" disablePadding>
                        {partnersItems.map((item) => (
                          <ListItem
                            key={item.text}
                            disablePadding
                            sx={{ pl: 2 }}>
                            <ListItemButton
                              onClick={() => handleMenuClick(item.path)}
                              sx={{
                                borderRadius: "8px",
                                "&:hover": {
                                  backgroundColor: theme.palette.action.hover,
                                },
                              }}>
                              <ListItemIcon sx={{ minWidth: "40px" }}>
                                {item.icon}
                              </ListItemIcon>
                              <ListItemText
                                primary={item.text}
                                primaryTypographyProps={{
                                  fontSize: "14px",
                                }}
                              />
                            </ListItemButton>
                          </ListItem>
                        ))}
                      </List>
                    </Collapse>
                  </>
                )}

                {/* üîπ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –æ—Ç—á–µ—Ç—ã (–¥–ª—è admin, buxgalter –∏ operator) */}
                {(role === "admin" ||
                  role === "buxgalter" ||
                  role === "operator") && (
                  <>
                    <ListItem disablePadding sx={{ mb: 1 }}>
                      <ListItemButton onClick={handleDailyReportsClick}>
                        <ListItemIcon>
                          <SummarizeIcon />
                        </ListItemIcon>
                        <ListItemText primary="–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –æ—Ç—á–µ—Ç—ã" />
                        {dailyReportsOpen ? <ExpandLess /> : <ExpandMore />}
                      </ListItemButton>
                    </ListItem>
                    <Collapse
                      in={dailyReportsOpen}
                      timeout="auto"
                      unmountOnExit>
                      <List component="div" disablePadding>
                        {dailyReportsItems.map((item) => (
                          <ListItem
                            key={item.text}
                            disablePadding
                            sx={{ pl: 2 }}>
                            <ListItemButton
                              onClick={() => handleMenuClick(item.path)}
                              sx={{
                                borderRadius: "8px",
                                "&:hover": {
                                  backgroundColor: theme.palette.action.hover,
                                },
                              }}>
                              <ListItemIcon sx={{ minWidth: "40px" }}>
                                {item.icon}
                              </ListItemIcon>
                              <ListItemText
                                primary={item.text}
                                primaryTypographyProps={{
                                  fontSize: "14px",
                                }}
                              />
                            </ListItemButton>
                          </ListItem>
                        ))}
                      </List>
                    </Collapse>
                  </>
                )}

                {/* üîπ –û—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ–Ω—é —Ç–æ–ª—å–∫–æ –¥–ª—è admin */}
                {role === "admin" && (
                  <>
                    {/* —Ä–µ–≥–∏–æ–Ω—ã */}
                    <ListItem disablePadding sx={{ mb: 1 }}>
                      <ListItemButton onClick={handleRegionsClick}>
                        <ListItemIcon>
                          <MapIcon />
                        </ListItemIcon>
                        <ListItemText primary="–†–µ–≥–∏–æ–Ω—ã" />
                        {regionsOpen ? <ExpandLess /> : <ExpandMore />}
                      </ListItemButton>
                    </ListItem>
                    <Collapse in={regionsOpen} timeout="auto" unmountOnExit>
                      <List component="div" disablePadding>
                        {regionsItems.map((item) => (
                          <ListItem
                            key={item.text}
                            disablePadding
                            sx={{ pl: 2 }}>
                            <ListItemButton
                              onClick={() => handleMenuClick(item.path)}>
                              <ListItemIcon>{item.icon}</ListItemIcon>
                              <ListItemText primary={item.text} />
                            </ListItemButton>
                          </ListItem>
                        ))}
                      </List>
                    </Collapse>

                    {/* –û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ */}
                    <ListItem disablePadding sx={{ mb: 1 }}>
                      <ListItemButton onClick={handleEquipmentClick}>
                        <ListItemIcon>
                          <BuildIcon />
                        </ListItemIcon>
                        <ListItemText primary="–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è" />
                        {equipmentOpen ? <ExpandLess /> : <ExpandMore />}
                      </ListItemButton>
                    </ListItem>
                    <Collapse in={equipmentOpen} timeout="auto" unmountOnExit>
                      <List component="div" disablePadding>
                        <ListItem disablePadding sx={{ pl: 2 }}>
                          <ListItemButton onClick={handleEquipmentDetailsClick}>
                            <ListItemIcon>
                              <SettingsInputComponentIcon />
                            </ListItemIcon>
                            <ListItemText primary="–°–≤–µ–¥–µ–Ω–∏—è –æ–± –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è—Ö" />
                            {equipmentDetailsOpen ? (
                              <ExpandLess />
                            ) : (
                              <ExpandMore />
                            )}
                          </ListItemButton>
                        </ListItem>
                        <Collapse
                          in={equipmentDetailsOpen}
                          timeout="auto"
                          unmountOnExit>
                          <List component="div" disablePadding>
                            {equipmentDetailsItems.map((item) => (
                              <ListItem
                                key={item.text}
                                disablePadding
                                sx={{ pl: 4 }}>
                                <ListItemButton
                                  onClick={() => handleMenuClick(item.path)}>
                                  <ListItemIcon>{item.icon}</ListItemIcon>
                                  <ListItemText primary={item.text} />
                                </ListItemButton>
                              </ListItem>
                            ))}
                          </List>
                        </Collapse>

                        {/* –¢–∏–ø—ã –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è */}
                        <ListItem disablePadding sx={{ pl: 2 }}>
                          <ListItemButton onClick={handleEquipmentTypesClick}>
                            <ListItemIcon>
                              <CategoryIcon />
                            </ListItemIcon>
                            <ListItemText primary="–¢–∏–ø—ã –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è" />
                            {equipmentTypesOpen ? (
                              <ExpandLess />
                            ) : (
                              <ExpandMore />
                            )}
                          </ListItemButton>
                        </ListItem>
                        <Collapse
                          in={equipmentTypesOpen}
                          timeout="auto"
                          unmountOnExit>
                          <List component="div" disablePadding>
                            {equipmentTypesItems.map((item) => (
                              <ListItem
                                key={item.text}
                                disablePadding
                                sx={{ pl: 4 }}>
                                <ListItemButton
                                  onClick={() => handleMenuClick(item.path)}>
                                  <ListItemIcon>{item.icon}</ListItemIcon>
                                  <ListItemText primary={item.text} />
                                </ListItemButton>
                              </ListItem>
                            ))}
                          </List>
                        </Collapse>
                      </List>
                    </Collapse>

                    {/* –î–æ–∫—É–º–µ–Ω—Ç—ã */}
                    <ListItem disablePadding sx={{ mb: 1 }}>
                      <ListItemButton onClick={handleDocumentsClick}>
                        <ListItemIcon>
                          <DescriptionIcon />
                        </ListItemIcon>
                        <ListItemText primary="–î–æ–∫—É–º–µ–Ω—Ç—ã" />
                        {documentsOpen ? <ExpandLess /> : <ExpandMore />}
                      </ListItemButton>
                    </ListItem>
                    <Collapse in={documentsOpen} timeout="auto" unmountOnExit>
                      <List component="div" disablePadding>
                        <ListItem disablePadding sx={{ pl: 2 }}>
                          <ListItemButton
                            onClick={() => handleMenuClick("/doctypepage")}>
                            <ListItemIcon>
                              <CategoryIcon />
                            </ListItemIcon>
                            <ListItemText primary="–¢–∏–ø—ã –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤" />
                          </ListItemButton>
                        </ListItem>

                        <Divider sx={{ my: 1 }} />

                        <ListItem disablePadding sx={{ pl: 2 }}>
                          <ListItemButton onClick={handleDocsTimedClick}>
                            <ListItemIcon>
                              <ScheduleIcon />
                            </ListItemIcon>
                            <ListItemText primary="–î–æ–∫—É–º–µ–Ω—Ç—ã —Å–æ —Å—Ä–æ–∫–æ–º" />
                            {docsTimedOpen ? <ExpandLess /> : <ExpandMore />}
                          </ListItemButton>
                        </ListItem>
                        <Collapse
                          in={docsTimedOpen}
                          timeout="auto"
                          unmountOnExit>
                          <List component="div" disablePadding>
                            {docsTimedItems.map((item) => (
                              <ListItem
                                key={item.text}
                                disablePadding
                                sx={{ pl: 4 }}>
                                <ListItemButton
                                  onClick={() => handleMenuClick(item.path)}>
                                  <ListItemIcon>{item.icon}</ListItemIcon>
                                  <ListItemText primary={item.text} />
                                </ListItemButton>
                              </ListItem>
                            ))}
                          </List>
                        </Collapse>

                        <Divider sx={{ my: 1 }} />

                        <ListItem disablePadding sx={{ pl: 2 }}>
                          <ListItemButton onClick={handleDocsPerpClick}>
                            <ListItemIcon>
                              <AllInclusiveIcon />
                            </ListItemIcon>
                            <ListItemText primary="–ë–µ—Å—Å—Ä–æ—á–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã" />
                            {docsPerpOpen ? <ExpandLess /> : <ExpandMore />}
                          </ListItemButton>
                        </ListItem>
                        <Collapse
                          in={docsPerpOpen}
                          timeout="auto"
                          unmountOnExit>
                          <List component="div" disablePadding>
                            {docsPerpItems.map((item) => (
                              <ListItem
                                key={item.text}
                                disablePadding
                                sx={{ pl: 4 }}>
                                <ListItemButton
                                  onClick={() => handleMenuClick(item.path)}>
                                  <ListItemIcon>{item.icon}</ListItemIcon>
                                  <ListItemText primary={item.text} />
                                </ListItemButton>
                              </ListItem>
                            ))}
                          </List>
                        </Collapse>
                      </List>
                    </Collapse>
                  </>
                )}
              </List>
            </Box>
          </Paper>
        </Drawer>
      )}
    </Box>
  );
}
