import { useState } from "react";
import { auth, db } from "../firebase/config";
import { signInWithEmailAndPassword } from "firebase/auth";
import {
  doc,
  getDoc,
  collection,
  query,
  where,
  getDocs,
} from "firebase/firestore";
import { useAppStore } from "../lib/zustand";
import { toast } from "react-toastify";
import { ToastBar } from "react-hot-toast";

export function useLogin() {
  const [isPending, setIsPending] = useState(false);
  const setUser = useAppStore((state) => state.setUser);
  const setUserData = useAppStore((state) => state.setUserData);
  const loadUserData = useAppStore((state) => state.loadUserData); // üîπ –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ
  const initializeSession = useAppStore((state) => state.initializeSession);

  const signIn = async (email, password) => {
    setIsPending(true);
    try {
      // console.log("üîê –ù–∞—á–∞–ª–æ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:", email);

      // 1. –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –≤ Firebase Auth
      const result = await signInWithEmailAndPassword(auth, email, password);
      const firebaseUser = result.user;

      // console.log("‚úÖ Firebase Auth —É—Å–ø–µ—à–Ω–æ");
      // console.log("üîë Firebase UID:", firebaseUser.uid);
      // console.log("üìß Firebase Email:", firebaseUser.email);

      // 2. –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Firestore –ø–æ email (—Ç–∞–∫ –∫–∞–∫ UID –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç)
      // console.log("üîç –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Firestore –ø–æ email:", email);

      const usersRef = collection(db, "users");
      const q = query(usersRef, where("email", "==", email));
      const querySnapshot = await getDocs(q);

      // console.log("üìä –ù–∞–π–¥–µ–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:", querySnapshot.size);

      if (querySnapshot.empty) {
        console.log("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ Firestore –ø–æ email:", email);
        throw new Error("–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ");
      }

      // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç
      const userDoc = querySnapshot.docs[0];
      const userDataFromFirestore = userDoc.data();

      // console.log("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω –≤ Firestore:");
      // console.log("üìÑ Firestore UID:", userDataFromFirestore.uid);
      // console.log("üë§ Firestore Role:", userDataFromFirestore.role);
      // console.log("üìã –í—Å–µ –¥–∞–Ω–Ω—ã–µ:", userDataFromFirestore);

      // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ UID
      if (userDataFromFirestore.uid !== firebaseUser.uid) {
        // console.warn("‚ö†Ô∏è UID –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç:");
        // console.warn("Firebase UID:", firebaseUser.uid);
        // console.warn("Firestore UID:", userDataFromFirestore.uid);
        // –ù–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º, —Ç–∞–∫ –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω –ø–æ email
        // console.log("üîÑ –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—Ö–æ–¥, —Ç–∞–∫ –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω –ø–æ email");
      }

      // 4. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ Zustand
      setUser(firebaseUser);
      setUserData(userDataFromFirestore); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å—Ç–µ–π—Ç –∏ localStorage
      initializeSession();

      toast.done(
        `Xush kelibsiz, janob ${
          userDataFromFirestore.firstName || userDataFromFirestore.firstName
        }`
      );
      setIsPending(false);
      return { success: true, user: userDataFromFirestore };
    } catch (error) {
      console.error("‚ùå Login error:", error);
      console.error("Error code:", error.code);
      console.error("Error message:", error.message);

      let errorMessage = "–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞";

      switch (error.code) {
        case "auth/invalid-email":
          errorMessage = "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email";
          break;
        case "auth/user-not-found":
          errorMessage = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω";
          break;
        case "auth/wrong-password":
          errorMessage = "–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å";
          break;
        case "auth/too-many-requests":
          errorMessage = "–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ";
          break;
        default:
          errorMessage = error.message || "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞";
      }

      toast.error(errorMessage);
      setIsPending(false);

      // –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
      if (auth.currentUser) {
        await auth.signOut();
      }

      return { success: false, error: errorMessage };
    }
  };

  return { isPending, signIn };
}
